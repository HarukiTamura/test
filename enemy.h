/*******************************************************************************
* タイトル	:エネミー.h
* ファイル名:enemy.h
* 作成者	:田村春樹
* 作成日	:2015/06/24
********************************************************************************
* 更新履歴	ver 1.00
*******************************************************************************/
#ifndef _ENEMY_H_
#define _ENEMY_H_
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "game.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/
#define ENEMY_MAX			( 100 )

typedef enum
{
	ENEMY_001 = 0,
	ENEMY_002,
	ENEMY_TYPE_MAX
}ENEMY_TYPE;

typedef enum
{
	ENEMY_AI_NORMAL = 0,	/*入力値で移動*/
	ENEMY_AI_0001,
	ENEMY_AI_0002,
	ENEMY_AI_0003,
	ENEMY_AI_0004,
	ENEMY_AI_0005,
	ENEMY_AI_0006,
	ENEMY_AI_0007,
	ENEMY_AI_0008,
	ENEMY_AI_0009,
	ENEMY_AI_0010,
	ENEMY_AI_0011,
	ENEMY_AI_0012,
	ENEMY_AI_MAX
}ENEMY_AI_TYPE;


typedef enum
{
	ENEMY_ST_NORMAL = 0,
	ENEMY_ST_DAMAGE,
	ENEMY_ST_EXPLOSION,
	ENEMY_ST_MAX
}ENEMY_STATUS;
/*******************************************************************************
* 構造体定義
*******************************************************************************/
//エネミーのステータス
typedef struct
{
	//処理軽減の為にint型として扱う。下三桁を小数点以下として扱う。
	int posX;	//位置
	int posY;	//位置
	int posZ;	//位置
	int moveX;	//移動量
	int moveY;	//移動量
	int moveZ;	//移動量
	int vector;	//角度
	int nowMode;	//現在モード
	//32byte
	int radius;	//辺り半径
	int nCurveCnt;		//カーブ・バウンド数
	int nLife;			//寿命
	bool bCurve;		//カーブしたかどうか
	bool bUse;			//使用しているかどうか
	ENEMY_TYPE type;	//エネミーの種類
	ENEMY_AI_TYPE aiType;	//エネミーの行動パターン
	ENEMY_STATUS state;	//エネミーの状態
	CATEGORY category;	//所属勢力
}ENEMY;

/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/

/*******************************************************************************
* 関数名	:HRESULT InitEnemy( void )
*		エネミー初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitEnemy( void );

/*******************************************************************************
* 関数名	:void UninitEnemy( void )
*		エネミー終了処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:終了時に実行する関数を内包する関数で終了時に一度のみ動作。
*******************************************************************************/
void UninitEnemy( void );

/*******************************************************************************
* 関数名	:void UpdateEnemy( void )
*		エネミー更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。実質的なメイン関数です。
*******************************************************************************/
void UpdateEnemy( void );

/*******************************************************************************
* 関数名	:void DrawEnemy( void )
*		エネミー描画処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
void DrawEnemy( void );

/*******************************************************************************
* 関数名	:void SetEnemy( D3DXVECTOR3 pos , D3DXVECTOR3 vecMove , int nLife , ENEMY_TYPE type )
*		エネミーを生成する関数です。
* 引数		:D3DXVECTOR3 pos		エネミーの出現位置です。
*			 D3DXVECTOR3 vecMove	エネミーの移動量です。
*			 int nLife				エネミーの寿命です。
*			(ENEMY_TYPE type		エネミーの種類です。)	
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
//void SetEnemy( int posX , int posY , int posZrot , int moveX , int moveY , int moveZrot , int nLife );
void SetEnemy( int posX , int posY , int posZrot , int moveX , int moveY , int moveZrot , int nLife , CATEGORY category , ENEMY_TYPE type , ENEMY_AI_TYPE aiType = ENEMY_AI_NORMAL );


/*******************************************************************************
* 関数名	:ENEMY* GetEnemy( void )
*		エネミーを渡す処理関数です。
* 引数		:int enemyNum	エネミーの要素
* 戻り値	:ENEMY*			エネミー構造体のアドレス
* 説明		:エネミーの半径を渡す関数です。
*******************************************************************************/
ENEMY* GetEnemy( int enemyNum );

#endif