/*******************************************************************************
* タイトル	:自作math関数cpp
* ファイル名:unoMath.cpp
* 作成者	:田村春樹
* 作成日	:2014/12/26
********************************************************************************
* 更新履歴	ver 1.00 おおよその完成(参考：ttp://mmk.rulez.jp/technical/parametric-analysis/trigonometric-function様)
*
*******************************************************************************/

/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include <stdio.h>
#include "unoMath.h"
/*******************************************************************************
* マクロ定義
*******************************************************************************/
#define PI ( 3.14159265358979323846 )
#define TABLE_DATA_NUM ( 90 )

#define SIN_REPEAT_MAX ( 4 )	/*計算繰り返し回数（回数増＝精度＆処理時間＋ ）*/
#define SQRT_REPEAT_MAX ( 9 )
/*******************************************************************************
* グローバル変数
*******************************************************************************/
/*sinテーブル(0からπ/2までを90分割した時のsinの値)*/
const double sintable[128]={
0.000000,0.012368,0.024734,0.037097,0.049454,0.061803,0.074143,0.086471,0.098786,0.111087,
0.123370,0.135634,0.147877,0.160098,0.172295,0.184465,0.196606,0.208718,0.220798,0.232844,
0.244854,0.256827,0.268761,0.280654,0.292503,0.304308,0.316066,0.327776,0.339436,0.351044,
0.362598,0.374097,0.385538,0.396921,0.408243,0.419502,0.430697,0.441826,0.452888,0.463881,
0.474802,0.485651,0.496425,0.507124,0.517745,0.528287,0.538748,0.549126,0.559421,0.569630,
0.579752,0.589785,0.599728,0.609579,0.619337,0.629000,0.638567,0.648036,0.657406,0.666676,
0.675843,0.684908,0.693867,0.702720,0.711466,0.720103,0.728630,0.737045,0.745348,0.753536,
0.761610,0.769566,0.777405,0.785125,0.792725,0.800204,0.807561,0.814793,0.821901,0.828884,
0.835739,0.842467,0.849066,0.855535,0.861873,0.868079,0.874153,0.880093,0.885898,0.891567,
0.897101,0.902497,0.907754,0.912873,0.917853,0.922692,0.927390,0.931946,0.936359,0.940629,
0.944755,0.948737,0.952574,0.956265,0.959809,0.963207,0.966457,0.969560,0.972514,0.975320,
0.977976,0.980482,0.982839,0.985045,0.987101,0.989006,0.990759,0.992361,0.993811,0.995109,
0.996254,0.997248,0.998088,0.998776,0.999312,0.999694,0.999924,1.000000};
 
/*******************************************************************************
* 関数名	:void unoSin( double sinAngleX )
*		sinの計算を行います。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:sinAngleXに渡された角度のsinを求めます。
*******************************************************************************/
double unoSin( double sinAngleX )
{
	/*128は分割数-1，254は(分割数-1)*2,508は(分割数-1)*4の置き換え*/
    int i;
    int sign = 1;
    if( sinAngleX > 0 )/*四捨五入*/
	{
		i = (int)( sinAngleX * 254 / PI + 0.5 );
	}
    else
	{
		i = (int)( sinAngleX * 254 / PI - 0.5 );
	}
    if( i < 0 )
	{
		i = -i;
		sign = 0;
	}
    i %= 508;/*127*4,複数回回転分を除く*/
    if( i > 254 )
	{
		i = 508 - i;
		sign = 1 - sign;
	}
    if( i > 127 )
	{
		i = 254 - i;
	}
    if( sign == 1 )
	{
		return sintable[i];
	}
    return -sintable[i];
}

/*******************************************************************************
* 関数名	:void unoSinRad( double sinAngleX )
*		sinの計算を行います。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:sinAngleXに渡された角度のsinを求めます。（弧度法）
*******************************************************************************/
double unoSinRad( double sinAngleX )
{
	double sinAngleXdeg = sinAngleX * 2.0 * PI / 360.0;
	return unoSin( sinAngleXdeg );
}

/*******************************************************************************
* 関数名	:void unoCos( double sinAngleX )
*		cosの計算を行います。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:cosAngleXに渡された角度のcosを求めます。
*******************************************************************************/
double unoCos( double cosAngleX )
{
    return unoSin( cosAngleX + PI / 2 );
}

/*******************************************************************************
* 関数名	:void unoSinRad( double sinAngleX )
*		sinの計算を行います。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:sinAngleXに渡された角度のsinを求めます。（弧度法）
*******************************************************************************/
double unoCosRad( double cosAngleX )
{
	double cosAngleXdeg = cosAngleX * 2.0 * PI / 360.0;
    return unoCos( cosAngleXdeg );
}

/*******************************************************************************
* 関数名	:void unoSqrt( double a )
*		sinの計算を行います。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:sinAngleXに渡された角度のsinを求めます。（弧度法）
*******************************************************************************/
double unoSqrt( double a ){
    if( a <= 0 )
	{	
		return 0;
	}
    double t = a;
 
    for(int n=1;n<=SQRT_REPEAT_MAX;n++){
        t = (t + a / t) / 2;
    }

    return t;
}

/*******************************************************************************
* 関数名	:int unoExp( int baseNumber , int multiplier )
*				べき乗処理関数
* 引数		:int baseNumber	基数部
*			 int multiplier	乗数部
* 戻り値	:正常終了:float型	べき乗の演算結果
* 説明		:べき乗処理関数です。
*******************************************************************************/
int unoExp( int baseNumber , int multiplier )
{	
	int multiplierCnt =	1;		/*何乗したかカウントする変数(デフォルトで1乗)*/
	double answer = 1;

	if( baseNumber == 0 )
	{
		return 1;
	}
	else
	{
		for( multiplierCnt = 1; multiplierCnt < multiplier; multiplierCnt++ )
		{
			answer *= baseNumber;
		}
		return answer;
	}
}
/*******************************************************************************
* 関数名	:double unoExpf( double baseNumber , int multiplier )
*				べき乗処理関数
* 引数		:float baseNumber	基数部
*		int multiplier	乗数部
* 戻り値	:正常終了:float型	べき乗の演算結果
* 説明		:float型用のべき乗処理関数です。
*******************************************************************************/
double unoExpf( double baseNumber , int multiplier )
{
	int multiplierCnt =	1;		/*何乗したかカウントする変数(デフォルトで1乗)*/
	double answer = 1;

	if( baseNumber == 0 )
	{
		return 1;
	}
	else
	{
		for( multiplierCnt = 1; multiplierCnt < multiplier; multiplierCnt++ )
		{
			answer *= baseNumber;
		}
		return answer;
	}
}

/*******************************************************************************
* 関数名	:double unoRoundOffDecimal( float number , int decimalPlace )
*				小数用四捨五入関数
* 引数		:double number		四捨五入する数値
*			 int decimalPlace	小数第何位までで四捨五入するのか指定する値
* 戻り値	:正常終了:float型	四捨五入した結果
* 説明		:小数を指定桁で四捨五入します。
*******************************************************************************/
double unoRoundOffDecimal( double number , int decimalPlace )
{
	double answer = 0;
	answer =  number * unoExp( 10 , decimalPlace );
	answer = ( int )( answer + 0.5 );
	answer /= unoExp( 10 , decimalPlace );
	return answer;
}
