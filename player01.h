/*******************************************************************************
* タイトル	:プレイヤー01.h
* ファイル名:player01.h
* 作成者	:田村春樹
* 作成日	:2015/05/29
********************************************************************************
* 更新履歴	ver 1.00
*******************************************************************************/
#ifndef _PLAYER01_H_
#define _PLAYER01_H_
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/
#define PLAYER01_OUTPUT_POS_X	( 100 )		/*表示X座標*/
#define PLAYER01_OUTPUT_POS_Y	( 355 )		/*表示Y座標*/

#define LIAR_MAX ( 800 )
#define LIAR_MIN ( -800 )

#define PLAYER_RADIUS ( 5000 )	//当たり判定
#define GRAYZ_RADIUS ( 12000 )	//ドレイン判定

typedef enum
{
	PLAYER_MODE_NORMAL = 0,
	PLAYER_MODE_DAMAGE,
	PLAYER_MODE_HYPERMODE,
	PLAYER_MODE_OVERHEAT,
	PLAYER_MODE_START,
	PLAYER_MODE_MAX
}PLAYER_MODE;

/*******************************************************************************
* 構造体定義
*******************************************************************************/
typedef struct
{
	float posX;
	float posY;
	float rotate;
	int intPosX;
	int intPosY;
	int intRotate;
	int nLife;
	int nCombo;
	int liarNum;		//嘘属性吸収値：必殺射撃とバリア展開に使用されます。
	bool liarBarrier;	//バリアが展開されているかどうか。
	PLAYER_MODE mode;
}PLAYER;

/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/

/*******************************************************************************
* 関数名	:HRESULT InitPlayer01( void )
*		プレイヤー01初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitPlayer01( void );

/*******************************************************************************
* 関数名	:void UninitPlayer01( void )
*		プレイヤー01終了処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:終了時に実行する関数を内包する関数で終了時に一度のみ動作。
*******************************************************************************/
void UninitPlayer01( void );

/*******************************************************************************
* 関数名	:void UpdatePlayer01( void )
*		プレイヤー01更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。実質的なメイン関数です。
*******************************************************************************/
void UpdatePlayer01( void );

/*******************************************************************************
* 関数名	:void DrawPlayer01( void )
*		プレイヤー01描画処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
void DrawPlayer01( void );

/*******************************************************************************
* 関数名	:void DrawPlayer01core( void )
*		プレイヤー01描画処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
void DrawPlayer01core( void );

/*******************************************************************************
* 関数名	:PLAYER* GetPlayerState01( void )
*		プレイヤー01のステータスを取得します。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:プレイヤー01のステータスを取得します。。
*******************************************************************************/
PLAYER* GetPlayerState01( void );

#endif