/*******************************************************************************
* タイトル	:入力.h
* ファイル名:cursor.h
* 作成者	:田村春樹
* 作成日	:2015/05/29
********************************************************************************
* 更新履歴	ver 1.00
*******************************************************************************/
#ifndef _INPUT_H_
#define _INPUT_H_
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/
#define DEFAULT_KEY_REPEAT_FPS	( 60 )

typedef enum
{
	GP_ANGLE_UP = 0,
	GP_ANGLE_DOWN,
	GP_ANGLE_LEFT,
	GP_ANGLE_RIGHT,
}INPUT_GAMEPAD_ANGLE;

/*******************************************************************************
* 構造体定義
*******************************************************************************/

/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/


/*******************************************************************************
* 関数名	:void UpdateInput( void )
*		入力更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。実質的なメイン関数です。
*******************************************************************************/
void UpdateInput( void );

/*******************************************************************************
* 関数名	:HRESULT InitKeyboard( HINSTANCE hInstance , HWND hWnd )
*		キーボード入力の初期化関数です。
* 引数		:HINSTANCE hInstance	インスタンスのハンドル
*			 HWND hWnd				ウィンドウのハンドル
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitKeyboard( HINSTANCE hInstance , HWND hWnd );

/*******************************************************************************
* 関数名	:void UninitKeyboard( void )
*		キーボード入力終了処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:終了時に実行する関数を内包する関数で終了時に一度のみ動作。
*******************************************************************************/
void UninitKeyboard( void );

/*******************************************************************************
* 関数名	:void UpdateKeyboard( void )
*		キーボード入力更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
void UpdateKeyboard( void );

/*******************************************************************************
* 関数名	:bool GetKeyboardPress( int nKey )
*		キーボードからのPress入力を取得します。
* 引数		:int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetKeyboardPress( int nKey );
/*******************************************************************************
* 関数名	:bool GetKeyboardTrigger( int nKey )
*		キーボードからのTrigger入力を取得します。
* 引数		:int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetKeyboardTrigger( int nKey );

/*******************************************************************************
* 関数名	:bool GetKeyboardRelease( int nKey )
*		キーボードからのRelease入力を取得します。
* 引数		:int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetKeyboardRelease( int nKey );

/*******************************************************************************
* 関数名	:bool GetKeyboardRepeat( int nKey )
*		キーボードからのRepeat入力を取得します。
* 引数		:int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetKeyboardRepeat( int nKey );

/*******************************************************************************
* 関数名	:HRESULT InitMouse( HINSTANCE hInstance , HWND hWnd )
*		マウス入力の初期化関数です。
* 引数		:HINSTANCE hInstance	インスタンスのハンドル
*			 HWND hWnd				ウィンドウのハンドル
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitMouse( HINSTANCE hInstance , HWND hWnd );

/*******************************************************************************
* 関数名	:void UninitMouse( void )
*		マウス入力終了処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:終了時に実行する関数を内包する関数で終了時に一度のみ動作。
*******************************************************************************/
void UninitMouse( void );

/*******************************************************************************
* 関数名	:void UpdateMouse( void )
*		マウス入力更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
void UpdateMouse( void );

/*******************************************************************************
* 関数名	:bool GetMousePress( int nKey )
*		マウスからのPress入力を取得します。
* 引数		:int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetMousePress( int nKey );

/*******************************************************************************
* 関数名	:bool GetMouseTrigger( int nKey )
*		マウスからのTrigger入力を取得します。
* 引数		:int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetMouseTrigger( int nKey );

/*******************************************************************************
* 関数名	:bool GetMouseRelease( int nKey )
*		マウスからのRelease入力を取得します。
* 引数		:int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetMouseRelease( int nKey );

/*******************************************************************************
* 関数名	:HRESULT InitGamePad( HINSTANCE hInstance , HWND hWnd )
*		ゲームパッド入力の初期化関数です。
* 引数		:HINSTANCE hInstance	インスタンスのハンドル
*			 HWND hWnd				ウィンドウのハンドル
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitGamePad( HINSTANCE hInstance , HWND hWnd );

/*******************************************************************************
* 関数名	:void UninitGamePad( void )
*		ゲームパッド入力終了処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:終了時に実行する関数を内包する関数で終了時に一度のみ動作。
*******************************************************************************/
void UninitGamePad( void );

/*******************************************************************************
* 関数名	:void UpdateGamePad( void )
*		ゲームパッド入力更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
void UpdateGamePad( void );

/*******************************************************************************
* 関数名	:bool GetGamePadPress( int gamePadNum , int nKey )
*		ゲームパッドからのPress入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadPress( int nKey );
//プレイヤー指定版
bool GetGamePadPress( int gamePadNum , int nKey );

/*******************************************************************************
* 関数名	:bool GetGamePadTrigger( int gamePadNum , int nKey )
*		ゲームパッドからのTrigger入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadTrigger( int nKey );
//プレイヤー指定版
bool GetGamePadTrigger( int gamePadNum , int nKey );

/*******************************************************************************
* 関数名	:bool GetGamePadRelease( int gamePadNum , int nKey )
*		ゲームパッドからのRelease入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadRelease( int nKey );
//プレイヤー指定版
bool GetGamePadRelease( int gamePadNum , int nKey );

/*******************************************************************************
* 関数名	:bool GetGamePadRepeat( int gamePadNum , int nKey )
*		ゲームパッドからのRepeat入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 int nKey	所得するキー番号。(DirectInputに定義済み「DIK_XXX」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadRepeat( int nKey );
//プレイヤー指定版
bool GetGamePadRepeat( int gamePadNum , int nKey );

/*******************************************************************************
* 関数名	:bool GetGamePadAnglePress( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle )
*		ゲームパッドからのPress入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 INPUT_GAMEPAD_ANGLE GpAngle	取得する方向。(Input.hに定義済み「INPUT_GP〜」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadAnglePress( INPUT_GAMEPAD_ANGLE GpAngle );
//プレイヤー指定版
bool GetGamePadAnglePress( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle );

/*******************************************************************************
* 関数名	:bool GetGamePadAngleTrigger( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle )
*		ゲームパッドからのTrigger入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 INPUT_GAMEPAD_ANGLE GpAngle	取得する方向。(Input.hに定義済み「INPUT_GP〜」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadAngleTrigger( INPUT_GAMEPAD_ANGLE GpAngle );
//プレイヤー指定版
bool GetGamePadAngleTrigger( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle );

/*******************************************************************************
* 関数名	:bool GetGamePadAngleRelease( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle )
*		ゲームパッドからのRelease入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 INPUT_GAMEPAD_ANGLE GpAngle	取得する方向。(Input.hに定義済み「INPUT_GP〜」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadAngleRelease( INPUT_GAMEPAD_ANGLE GpAngle );
//プレイヤー指定版
bool GetGamePadAngleRelease( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle );

/*******************************************************************************
* 関数名	:bool GetGamePadAngleRepeat( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle )
*		ゲームパッドからのRepeat入力を取得します。
* 引数		:int gamePadNum	ゲームパッドの番号
*			 INPUT_GAMEPAD_ANGLE GpAngle	取得する方向。(Input.hに定義済み「INPUT_GP〜」)
* 戻り値	:bool	true:有効	false:無効
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetGamePadAngleRepeat( INPUT_GAMEPAD_ANGLE GpAngle );
//プレイヤー指定版
bool GetGamePadAngleRepeat( int gamePadNum , INPUT_GAMEPAD_ANGLE GpAngle );

/*******************************************************************************
* 関数名	:bool GetAnyButtonPress( int gamePadNum )
*		指定ゲームパッドから何かしらの入力がされたかを返します。
* 引数		:int gamePadNum	ゲームパッドの番号
* 戻り値	:bool	true:入力あり	false:入力なし
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetAnyButtonPress( int gamePadNum );

/*******************************************************************************
* 関数名	:bool GetAnykeyPress( void )
*		何かしらの入力がされたかを返します。
* 引数		:void	引数無し
* 戻り値	:bool	true:入力あり	false:入力なし
* 説明		:処理周回毎の処理内容を記述します。
*******************************************************************************/
bool GetAnykeyPress( void );

/*******************************************************************************
* 関数名	:void setRepeatFps( int setNewFps )
*		リピート入力の取得タイミングを調整します。
* 引数		:int	setNewFps	新規設定値（空白の場合はデフォルト）
* 戻り値	:void	戻り値なし
* 説明		:リピート入力の取得タイミングを調整します。
*******************************************************************************/
void setRepeatFps( int setNewFps );
void setRepeatFps( void );

#endif