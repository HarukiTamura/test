/*******************************************************************************
* タイトル	:エネミー.h
* ファイル名:AfEnemy.h
* 作成者	:田村春樹
* 作成日	:2015/05/29
********************************************************************************
* 更新履歴	ver 1.00
*******************************************************************************/
#ifndef _AF_ENEMY_H_
#define _AF_ENEMY_H_
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "afPointConvert.h"
/*******************************************************************************
* マクロ定義
*******************************************************************************/

#define ENEMY_MAX_NUM	( 30 )	//敵の数
#define ENEMY_RADIUS	( 80000 )	//当たり判定

typedef enum
{
	ENEMY_MODE_NORMAL = 0,
	ENEMY_MODE_DAMAGE,
	ENEMY_MODE_HYPERMODE,
	ENEMY_MODE_OVERHEAT,
	ENEMY_MODE_START,
	ENEMY_MODE_MAX
}ENEMY_MODE;

typedef enum
{
	ENF_NO_MOVE = 0,
	ENF_STRAIGHT,
	ENF_PLAYER_TRACKING
}ENEMY_FLIGHT_PATTERN;

typedef enum
{
	ENAI_NO_SHOT = 0,
	ENAI_MISSILE,
	ENEMY_AI_BOSS1
}ENEMY_AI_PATTERN;

/*******************************************************************************
* 構造体定義
*******************************************************************************/
typedef struct
{
	bool bUse;
	bool bLockOn;
	AF_OBJECT_STATUS posStatus;
	float moveZ;
	float posZ;
	int intMoveX;
	int intMoveY;
	int intPosX;
	int intPosY;
	int nLife;
	int nScore;

	ENEMY_MODE mode;
	ENEMY_FLIGHT_PATTERN flightPattern;
	ENEMY_AI_PATTERN aiPattern;
}AF_ENEMY_STATUS;

/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/

/*******************************************************************************
* 関数名	:HRESULT InitAfEnemy( void )
*		エネミー初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitAfEnemy( void );

/*******************************************************************************
* 関数名	:HRESULT InitDirectAfEnemy( void )
*		エネミー初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitDirectAfEnemy( void );

/*******************************************************************************
* 関数名	:HRESULT InitValueAfEnemy( void )
*		エネミー初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
void InitValueAfEnemy( void );

/*******************************************************************************
* 関数名	:void UninitAfEnemy( void )
*		エネミー終了処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:終了時に実行する関数を内包する関数で終了時に一度のみ動作。
*******************************************************************************/
void UninitAfEnemy( void );

/*******************************************************************************
* 関数名	:void UpdateAfEnemy( void )
*		エネミー更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。実質的なメイン関数です。
*******************************************************************************/
void UpdateAfEnemy( void );

/*******************************************************************************
* 関数名	:void DrawAfEnemy( void )
*		エネミー描画処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
void DrawAfEnemy( void );

/*******************************************************************************
* 関数名	:void DrawAfEnemycore( void )
*		エネミー描画処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
void DrawAfEnemycore( void );

/*******************************************************************************
* 関数名	:AF_ENEMY_STATUS* GetEnemyState( int num )
*		エネミーのステータスを取得します。
* 引数		:int num	入手する構造体の番号
* 戻り値	:void 戻り値なし
* 説明		:エネミーのステータスを取得します。。
*******************************************************************************/
AF_ENEMY_STATUS* GetEnemyState( int num );

/*******************************************************************************
* 関数名	:AF_ENEMY_STATUS* GetEnemyState( int num )
*		エネミーのステータスを取得します。
* 引数		:int num	入手する構造体の番号
* 戻り値	:void 戻り値なし
* 説明		:エネミーのステータスを取得します。。
*******************************************************************************/
void SetEnemyState( float posX , float posY , float posZ , float moveZ , ENEMY_FLIGHT_PATTERN ENFlightPattern , ENEMY_AI_PATTERN ENAIPattern );

#endif