/*******************************************************************************
* タイトル	:プレイヤー.h
* ファイル名:AfPlayer.h
* 作成者	:田村春樹
* 作成日	:2015/05/29
********************************************************************************
* 更新履歴	ver 1.00
*******************************************************************************/
#ifndef _AF_PLAYER_H_
#define _AF_PLAYER_H_
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "afPointConvert.h"
/*******************************************************************************
* マクロ定義
*******************************************************************************/

#define PLAYER_RADIUS ( 5000 )	//当たり判定
#define AF_PLAYER_DOWN_LIMIT	( 350 )
#define AF_PLAYER_RIGHT_LIMIT	( 550 )

#define PLAYER_Z_POS	( 1.0f )

typedef enum
{
	PLAYER_MODE_NORMAL = 0,
	PLAYER_MODE_DAMAGE,
	PLAYER_MODE_HYPERMODE,
	PLAYER_MODE_OVERHEAT,
	PLAYER_MODE_START,
	PLAYER_MODE_MAX
}PLAYER_MODE;

/*******************************************************************************
* 構造体定義
*******************************************************************************/
typedef struct
{
	AF_OBJECT_STATUS posStatus;
	int intPosX;
	int intPosY;
	int nLife;
	int nCombo;
	float speed;
	PLAYER_MODE mode;
}PLAYER;

/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/

/*******************************************************************************
* 関数名	:HRESULT InitAfPlayer( void )
*		プレイヤー初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitAfPlayer( void );

/*******************************************************************************
* 関数名	:HRESULT InitDirectAfPlayer( void )
*		プレイヤー初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
HRESULT InitDirectAfPlayer( void );

/*******************************************************************************
* 関数名	:HRESULT InitValueAfPlayer( void )
*		プレイヤー初期化関数です。
* 引数		:void 引数なし
* 戻り値	:HRESULT 関数の実行結果
* 説明		:変数等の初期化を実行する起動毎に一度のみ動作する関数です。
*******************************************************************************/
void InitValueAfPlayer( void );

/*******************************************************************************
* 関数名	:void UninitAfPlayer( void )
*		プレイヤー終了処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:終了時に実行する関数を内包する関数で終了時に一度のみ動作。
*******************************************************************************/
void UninitAfPlayer( void );

/*******************************************************************************
* 関数名	:void UpdateAfPlayer( void )
*		プレイヤー更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。実質的なメイン関数です。
*******************************************************************************/
void UpdateAfPlayer( void );

/*******************************************************************************
* 関数名	:void UpdateAfPlayer( void )
*		プレイヤー更新処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:処理周回毎の処理内容を記述します。実質的なメイン関数です。
*******************************************************************************/
void UpdateAfPlayer2( void );

/*******************************************************************************
* 関数名	:void DrawAfPlayer( void )
*		プレイヤー描画処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
void DrawAfPlayer( void );

/*******************************************************************************
* 関数名	:void DrawAfPlayercore( void )
*		プレイヤー描画処理関数です。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:画面出力に関わる処理を内包します。
*******************************************************************************/
void DrawAfPlayercore( void );

/*******************************************************************************
* 関数名	:PLAYER* GetPlayerState( void )
*		プレイヤーのステータスを取得します。
* 引数		:void 引数なし
* 戻り値	:void 戻り値なし
* 説明		:プレイヤーのステータスを取得します。。
*******************************************************************************/
PLAYER* GetPlayerState( void );

#endif